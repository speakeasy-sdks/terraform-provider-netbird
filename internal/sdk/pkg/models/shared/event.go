// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"netbird/v2/internal/sdk/pkg/utils"
	"time"
)

// ActivityCode - The string code of the activity that occurred during the event
type ActivityCode string

const (
	ActivityCodeUserPeerDelete                           ActivityCode = "user.peer.delete"
	ActivityCodeUserJoin                                 ActivityCode = "user.join"
	ActivityCodeUserInvite                               ActivityCode = "user.invite"
	ActivityCodeUserPeerAdd                              ActivityCode = "user.peer.add"
	ActivityCodeUserGroupAdd                             ActivityCode = "user.group.add"
	ActivityCodeUserGroupDelete                          ActivityCode = "user.group.delete"
	ActivityCodeUserRoleUpdate                           ActivityCode = "user.role.update"
	ActivityCodeUserBlock                                ActivityCode = "user.block"
	ActivityCodeUserUnblock                              ActivityCode = "user.unblock"
	ActivityCodeUserPeerLogin                            ActivityCode = "user.peer.login"
	ActivityCodeSetupkeyPeerAdd                          ActivityCode = "setupkey.peer.add"
	ActivityCodeSetupkeyAdd                              ActivityCode = "setupkey.add"
	ActivityCodeSetupkeyUpdate                           ActivityCode = "setupkey.update"
	ActivityCodeSetupkeyRevoke                           ActivityCode = "setupkey.revoke"
	ActivityCodeSetupkeyOveruse                          ActivityCode = "setupkey.overuse"
	ActivityCodeSetupkeyGroupDelete                      ActivityCode = "setupkey.group.delete"
	ActivityCodeSetupkeyGroupAdd                         ActivityCode = "setupkey.group.add"
	ActivityCodeRuleAdd                                  ActivityCode = "rule.add"
	ActivityCodeRuleDelete                               ActivityCode = "rule.delete"
	ActivityCodeRuleUpdate                               ActivityCode = "rule.update"
	ActivityCodePolicyAdd                                ActivityCode = "policy.add"
	ActivityCodePolicyDelete                             ActivityCode = "policy.delete"
	ActivityCodePolicyUpdate                             ActivityCode = "policy.update"
	ActivityCodeGroupAdd                                 ActivityCode = "group.add"
	ActivityCodeGroupUpdate                              ActivityCode = "group.update"
	ActivityCodeDNSSettingDisabledManagementGroupAdd     ActivityCode = "dns.setting.disabled.management.group.add"
	ActivityCodeDNSSettingDisabledManagementGroupDelete  ActivityCode = "dns.setting.disabled.management.group.delete"
	ActivityCodeAccountCreate                            ActivityCode = "account.create"
	ActivityCodeAccountSettingPeerLoginExpirationUpdate  ActivityCode = "account.setting.peer.login.expiration.update"
	ActivityCodeAccountSettingPeerLoginExpirationDisable ActivityCode = "account.setting.peer.login.expiration.disable"
	ActivityCodeAccountSettingPeerLoginExpirationEnable  ActivityCode = "account.setting.peer.login.expiration.enable"
	ActivityCodeRouteAdd                                 ActivityCode = "route.add"
	ActivityCodeRouteDelete                              ActivityCode = "route.delete"
	ActivityCodeRouteUpdate                              ActivityCode = "route.update"
	ActivityCodeNameserverGroupAdd                       ActivityCode = "nameserver.group.add"
	ActivityCodeNameserverGroupDelete                    ActivityCode = "nameserver.group.delete"
	ActivityCodeNameserverGroupUpdate                    ActivityCode = "nameserver.group.update"
	ActivityCodePeerSSHDisable                           ActivityCode = "peer.ssh.disable"
	ActivityCodePeerSSHEnable                            ActivityCode = "peer.ssh.enable"
	ActivityCodePeerRename                               ActivityCode = "peer.rename"
	ActivityCodePeerLoginExpirationDisable               ActivityCode = "peer.login.expiration.disable"
	ActivityCodePeerLoginExpirationEnable                ActivityCode = "peer.login.expiration.enable"
	ActivityCodePeerLoginExpire                          ActivityCode = "peer.login.expire"
	ActivityCodeServiceUserCreate                        ActivityCode = "service.user.create"
	ActivityCodePersonalAccessTokenCreate                ActivityCode = "personal.access.token.create"
	ActivityCodeServiceUserDelete                        ActivityCode = "service.user.delete"
	ActivityCodePersonalAccessTokenDelete                ActivityCode = "personal.access.token.delete"
)

func (e ActivityCode) ToPointer() *ActivityCode {
	return &e
}

func (e *ActivityCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user.peer.delete":
		fallthrough
	case "user.join":
		fallthrough
	case "user.invite":
		fallthrough
	case "user.peer.add":
		fallthrough
	case "user.group.add":
		fallthrough
	case "user.group.delete":
		fallthrough
	case "user.role.update":
		fallthrough
	case "user.block":
		fallthrough
	case "user.unblock":
		fallthrough
	case "user.peer.login":
		fallthrough
	case "setupkey.peer.add":
		fallthrough
	case "setupkey.add":
		fallthrough
	case "setupkey.update":
		fallthrough
	case "setupkey.revoke":
		fallthrough
	case "setupkey.overuse":
		fallthrough
	case "setupkey.group.delete":
		fallthrough
	case "setupkey.group.add":
		fallthrough
	case "rule.add":
		fallthrough
	case "rule.delete":
		fallthrough
	case "rule.update":
		fallthrough
	case "policy.add":
		fallthrough
	case "policy.delete":
		fallthrough
	case "policy.update":
		fallthrough
	case "group.add":
		fallthrough
	case "group.update":
		fallthrough
	case "dns.setting.disabled.management.group.add":
		fallthrough
	case "dns.setting.disabled.management.group.delete":
		fallthrough
	case "account.create":
		fallthrough
	case "account.setting.peer.login.expiration.update":
		fallthrough
	case "account.setting.peer.login.expiration.disable":
		fallthrough
	case "account.setting.peer.login.expiration.enable":
		fallthrough
	case "route.add":
		fallthrough
	case "route.delete":
		fallthrough
	case "route.update":
		fallthrough
	case "nameserver.group.add":
		fallthrough
	case "nameserver.group.delete":
		fallthrough
	case "nameserver.group.update":
		fallthrough
	case "peer.ssh.disable":
		fallthrough
	case "peer.ssh.enable":
		fallthrough
	case "peer.rename":
		fallthrough
	case "peer.login.expiration.disable":
		fallthrough
	case "peer.login.expiration.enable":
		fallthrough
	case "peer.login.expire":
		fallthrough
	case "service.user.create":
		fallthrough
	case "personal.access.token.create":
		fallthrough
	case "service.user.delete":
		fallthrough
	case "personal.access.token.delete":
		*e = ActivityCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActivityCode: %v", v)
	}
}

type Event struct {
	// The activity that occurred during the event
	Activity string `json:"activity"`
	// The string code of the activity that occurred during the event
	ActivityCode ActivityCode `json:"activity_code"`
	// Event unique identifier
	ID string `json:"id"`
	// The e-mail address of the initiator of the event. E.g., an e-mail of a user that triggered the event.
	InitiatorEmail string `json:"initiator_email"`
	// The ID of the initiator of the event. E.g., an ID of a user that triggered the event.
	InitiatorID string `json:"initiator_id"`
	// The name of the initiator of the event.
	InitiatorName string `json:"initiator_name"`
	// The metadata of the event
	Meta map[string]string `json:"meta"`
	// The ID of the target of the event. E.g., an ID of the peer that a user removed.
	TargetID string `json:"target_id"`
	// The date and time when the event occurred
	Timestamp time.Time `json:"timestamp"`
}

func (e Event) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *Event) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Event) GetActivity() string {
	if o == nil {
		return ""
	}
	return o.Activity
}

func (o *Event) GetActivityCode() ActivityCode {
	if o == nil {
		return ActivityCode("")
	}
	return o.ActivityCode
}

func (o *Event) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Event) GetInitiatorEmail() string {
	if o == nil {
		return ""
	}
	return o.InitiatorEmail
}

func (o *Event) GetInitiatorID() string {
	if o == nil {
		return ""
	}
	return o.InitiatorID
}

func (o *Event) GetInitiatorName() string {
	if o == nil {
		return ""
	}
	return o.InitiatorName
}

func (o *Event) GetMeta() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Meta
}

func (o *Event) GetTargetID() string {
	if o == nil {
		return ""
	}
	return o.TargetID
}

func (o *Event) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

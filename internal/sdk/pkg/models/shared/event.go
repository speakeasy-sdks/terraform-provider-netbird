// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// EventActivityCode - The string code of the activity that occurred during the event
type EventActivityCode string

const (
	EventActivityCodeUserPeerDelete                           EventActivityCode = "user.peer.delete"
	EventActivityCodeUserJoin                                 EventActivityCode = "user.join"
	EventActivityCodeUserInvite                               EventActivityCode = "user.invite"
	EventActivityCodeUserPeerAdd                              EventActivityCode = "user.peer.add"
	EventActivityCodeUserGroupAdd                             EventActivityCode = "user.group.add"
	EventActivityCodeUserGroupDelete                          EventActivityCode = "user.group.delete"
	EventActivityCodeUserRoleUpdate                           EventActivityCode = "user.role.update"
	EventActivityCodeUserBlock                                EventActivityCode = "user.block"
	EventActivityCodeUserUnblock                              EventActivityCode = "user.unblock"
	EventActivityCodeUserPeerLogin                            EventActivityCode = "user.peer.login"
	EventActivityCodeSetupkeyPeerAdd                          EventActivityCode = "setupkey.peer.add"
	EventActivityCodeSetupkeyAdd                              EventActivityCode = "setupkey.add"
	EventActivityCodeSetupkeyUpdate                           EventActivityCode = "setupkey.update"
	EventActivityCodeSetupkeyRevoke                           EventActivityCode = "setupkey.revoke"
	EventActivityCodeSetupkeyOveruse                          EventActivityCode = "setupkey.overuse"
	EventActivityCodeSetupkeyGroupDelete                      EventActivityCode = "setupkey.group.delete"
	EventActivityCodeSetupkeyGroupAdd                         EventActivityCode = "setupkey.group.add"
	EventActivityCodeRuleAdd                                  EventActivityCode = "rule.add"
	EventActivityCodeRuleDelete                               EventActivityCode = "rule.delete"
	EventActivityCodeRuleUpdate                               EventActivityCode = "rule.update"
	EventActivityCodePolicyAdd                                EventActivityCode = "policy.add"
	EventActivityCodePolicyDelete                             EventActivityCode = "policy.delete"
	EventActivityCodePolicyUpdate                             EventActivityCode = "policy.update"
	EventActivityCodeGroupAdd                                 EventActivityCode = "group.add"
	EventActivityCodeGroupUpdate                              EventActivityCode = "group.update"
	EventActivityCodeDNSSettingDisabledManagementGroupAdd     EventActivityCode = "dns.setting.disabled.management.group.add"
	EventActivityCodeDNSSettingDisabledManagementGroupDelete  EventActivityCode = "dns.setting.disabled.management.group.delete"
	EventActivityCodeAccountCreate                            EventActivityCode = "account.create"
	EventActivityCodeAccountSettingPeerLoginExpirationUpdate  EventActivityCode = "account.setting.peer.login.expiration.update"
	EventActivityCodeAccountSettingPeerLoginExpirationDisable EventActivityCode = "account.setting.peer.login.expiration.disable"
	EventActivityCodeAccountSettingPeerLoginExpirationEnable  EventActivityCode = "account.setting.peer.login.expiration.enable"
	EventActivityCodeRouteAdd                                 EventActivityCode = "route.add"
	EventActivityCodeRouteDelete                              EventActivityCode = "route.delete"
	EventActivityCodeRouteUpdate                              EventActivityCode = "route.update"
	EventActivityCodeNameserverGroupAdd                       EventActivityCode = "nameserver.group.add"
	EventActivityCodeNameserverGroupDelete                    EventActivityCode = "nameserver.group.delete"
	EventActivityCodeNameserverGroupUpdate                    EventActivityCode = "nameserver.group.update"
	EventActivityCodePeerSSHDisable                           EventActivityCode = "peer.ssh.disable"
	EventActivityCodePeerSSHEnable                            EventActivityCode = "peer.ssh.enable"
	EventActivityCodePeerRename                               EventActivityCode = "peer.rename"
	EventActivityCodePeerLoginExpirationDisable               EventActivityCode = "peer.login.expiration.disable"
	EventActivityCodePeerLoginExpirationEnable                EventActivityCode = "peer.login.expiration.enable"
	EventActivityCodePeerLoginExpire                          EventActivityCode = "peer.login.expire"
	EventActivityCodeServiceUserCreate                        EventActivityCode = "service.user.create"
	EventActivityCodePersonalAccessTokenCreate                EventActivityCode = "personal.access.token.create"
	EventActivityCodeServiceUserDelete                        EventActivityCode = "service.user.delete"
	EventActivityCodePersonalAccessTokenDelete                EventActivityCode = "personal.access.token.delete"
)

func (e EventActivityCode) ToPointer() *EventActivityCode {
	return &e
}

func (e *EventActivityCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user.peer.delete":
		fallthrough
	case "user.join":
		fallthrough
	case "user.invite":
		fallthrough
	case "user.peer.add":
		fallthrough
	case "user.group.add":
		fallthrough
	case "user.group.delete":
		fallthrough
	case "user.role.update":
		fallthrough
	case "user.block":
		fallthrough
	case "user.unblock":
		fallthrough
	case "user.peer.login":
		fallthrough
	case "setupkey.peer.add":
		fallthrough
	case "setupkey.add":
		fallthrough
	case "setupkey.update":
		fallthrough
	case "setupkey.revoke":
		fallthrough
	case "setupkey.overuse":
		fallthrough
	case "setupkey.group.delete":
		fallthrough
	case "setupkey.group.add":
		fallthrough
	case "rule.add":
		fallthrough
	case "rule.delete":
		fallthrough
	case "rule.update":
		fallthrough
	case "policy.add":
		fallthrough
	case "policy.delete":
		fallthrough
	case "policy.update":
		fallthrough
	case "group.add":
		fallthrough
	case "group.update":
		fallthrough
	case "dns.setting.disabled.management.group.add":
		fallthrough
	case "dns.setting.disabled.management.group.delete":
		fallthrough
	case "account.create":
		fallthrough
	case "account.setting.peer.login.expiration.update":
		fallthrough
	case "account.setting.peer.login.expiration.disable":
		fallthrough
	case "account.setting.peer.login.expiration.enable":
		fallthrough
	case "route.add":
		fallthrough
	case "route.delete":
		fallthrough
	case "route.update":
		fallthrough
	case "nameserver.group.add":
		fallthrough
	case "nameserver.group.delete":
		fallthrough
	case "nameserver.group.update":
		fallthrough
	case "peer.ssh.disable":
		fallthrough
	case "peer.ssh.enable":
		fallthrough
	case "peer.rename":
		fallthrough
	case "peer.login.expiration.disable":
		fallthrough
	case "peer.login.expiration.enable":
		fallthrough
	case "peer.login.expire":
		fallthrough
	case "service.user.create":
		fallthrough
	case "personal.access.token.create":
		fallthrough
	case "service.user.delete":
		fallthrough
	case "personal.access.token.delete":
		*e = EventActivityCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventActivityCode: %v", v)
	}
}

type Event struct {
	// The activity that occurred during the event
	Activity string `json:"activity"`
	// The string code of the activity that occurred during the event
	ActivityCode EventActivityCode `json:"activity_code"`
	// Event unique identifier
	ID string `json:"id"`
	// The e-mail address of the initiator of the event. E.g., an e-mail of a user that triggered the event.
	InitiatorEmail string `json:"initiator_email"`
	// The ID of the initiator of the event. E.g., an ID of a user that triggered the event.
	InitiatorID string `json:"initiator_id"`
	// The metadata of the event
	Meta map[string]string `json:"meta"`
	// The ID of the target of the event. E.g., an ID of the peer that a user removed.
	TargetID string `json:"target_id"`
	// The date and time when the event occurred
	Timestamp time.Time `json:"timestamp"`
}

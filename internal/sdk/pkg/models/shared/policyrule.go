// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PolicyRuleAction - Policy rule accept or drops packets
type PolicyRuleAction string

const (
	PolicyRuleActionAccept PolicyRuleAction = "accept"
	PolicyRuleActionDrop   PolicyRuleAction = "drop"
)

func (e PolicyRuleAction) ToPointer() *PolicyRuleAction {
	return &e
}

func (e *PolicyRuleAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accept":
		fallthrough
	case "drop":
		*e = PolicyRuleAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PolicyRuleAction: %v", v)
	}
}

// PolicyRuleProtocol - Policy rule type of the traffic
type PolicyRuleProtocol string

const (
	PolicyRuleProtocolAll  PolicyRuleProtocol = "all"
	PolicyRuleProtocolTCP  PolicyRuleProtocol = "tcp"
	PolicyRuleProtocolUDP  PolicyRuleProtocol = "udp"
	PolicyRuleProtocolIcmp PolicyRuleProtocol = "icmp"
)

func (e PolicyRuleProtocol) ToPointer() *PolicyRuleProtocol {
	return &e
}

func (e *PolicyRuleProtocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "tcp":
		fallthrough
	case "udp":
		fallthrough
	case "icmp":
		*e = PolicyRuleProtocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PolicyRuleProtocol: %v", v)
	}
}

type PolicyRule struct {
	// Policy rule accept or drops packets
	Action PolicyRuleAction `json:"action"`
	// Define if the rule is applicable in both directions, sources, and destinations.
	Bidirectional bool `json:"bidirectional"`
	// Policy rule friendly description
	Description *string `json:"description,omitempty"`
	// Policy rule destination groups
	Destinations []GroupMinimum `json:"destinations"`
	// Policy rule status
	Enabled bool `json:"enabled"`
	// Policy rule ID
	ID *string `json:"id,omitempty"`
	// Policy rule name identifier
	Name string `json:"name"`
	// Policy rule affected ports or it ranges list
	Ports []string `json:"ports,omitempty"`
	// Policy rule type of the traffic
	Protocol PolicyRuleProtocol `json:"protocol"`
	// Policy rule source groups
	Sources []GroupMinimum `json:"sources"`
}

func (o *PolicyRule) GetAction() PolicyRuleAction {
	if o == nil {
		return PolicyRuleAction("")
	}
	return o.Action
}

func (o *PolicyRule) GetBidirectional() bool {
	if o == nil {
		return false
	}
	return o.Bidirectional
}

func (o *PolicyRule) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PolicyRule) GetDestinations() []GroupMinimum {
	if o == nil {
		return []GroupMinimum{}
	}
	return o.Destinations
}

func (o *PolicyRule) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *PolicyRule) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PolicyRule) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PolicyRule) GetPorts() []string {
	if o == nil {
		return nil
	}
	return o.Ports
}

func (o *PolicyRule) GetProtocol() PolicyRuleProtocol {
	if o == nil {
		return PolicyRuleProtocol("")
	}
	return o.Protocol
}

func (o *PolicyRule) GetSources() []GroupMinimum {
	if o == nil {
		return []GroupMinimum{}
	}
	return o.Sources
}

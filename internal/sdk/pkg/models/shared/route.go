// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

type Route struct {
	// Route description
	Description string `json:"description"`
	// Route status
	Enabled bool `json:"enabled"`
	// Group IDs containing routing peers
	Groups []string `json:"groups"`
	// Route Id
	ID string `json:"id"`
	// Indicate if peer should masquerade traffic to this route's prefix
	Masquerade bool `json:"masquerade"`
	// Route metric number. Lowest number has higher priority
	Metric int64 `json:"metric"`
	// Network range in CIDR format
	Network string `json:"network"`
	// Route network identifier, to group HA routes
	NetworkID string `json:"network_id"`
	// Network type indicating if it is IPv4 or IPv6
	NetworkType string `json:"network_type"`
	// Peer Identifier associated with route. This property can not be set together with `peer_groups`
	Peer *string `json:"peer,omitempty"`
	// Peers Group Identifier associated with route. This property can not be set together with `peer`
	PeerGroups []string `json:"peer_groups,omitempty"`
}

func (o *Route) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *Route) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *Route) GetGroups() []string {
	if o == nil {
		return []string{}
	}
	return o.Groups
}

func (o *Route) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Route) GetMasquerade() bool {
	if o == nil {
		return false
	}
	return o.Masquerade
}

func (o *Route) GetMetric() int64 {
	if o == nil {
		return 0
	}
	return o.Metric
}

func (o *Route) GetNetwork() string {
	if o == nil {
		return ""
	}
	return o.Network
}

func (o *Route) GetNetworkID() string {
	if o == nil {
		return ""
	}
	return o.NetworkID
}

func (o *Route) GetNetworkType() string {
	if o == nil {
		return ""
	}
	return o.NetworkType
}

func (o *Route) GetPeer() *string {
	if o == nil {
		return nil
	}
	return o.Peer
}

func (o *Route) GetPeerGroups() []string {
	if o == nil {
		return nil
	}
	return o.PeerGroups
}

// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Action - Policy rule accept or drops packets
type Action string

const (
	ActionAccept Action = "accept"
	ActionDrop   Action = "drop"
)

func (e Action) ToPointer() *Action {
	return &e
}

func (e *Action) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accept":
		fallthrough
	case "drop":
		*e = Action(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Action: %v", v)
	}
}

// Protocol - Policy rule type of the traffic
type Protocol string

const (
	ProtocolAll  Protocol = "all"
	ProtocolTCP  Protocol = "tcp"
	ProtocolUDP  Protocol = "udp"
	ProtocolIcmp Protocol = "icmp"
)

func (e Protocol) ToPointer() *Protocol {
	return &e
}

func (e *Protocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "tcp":
		fallthrough
	case "udp":
		fallthrough
	case "icmp":
		*e = Protocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Protocol: %v", v)
	}
}

type PolicyRule struct {
	// Policy rule accept or drops packets
	Action Action `json:"action"`
	// Define if the rule is applicable in both directions, sources, and destinations.
	Bidirectional bool `json:"bidirectional"`
	// Policy rule friendly description
	Description *string `json:"description,omitempty"`
	// Policy rule destination group IDs
	Destinations []GroupMinimum `json:"destinations"`
	// Policy rule status
	Enabled bool `json:"enabled"`
	// Policy rule ID
	ID *string `json:"id,omitempty"`
	// Policy rule name identifier
	Name string `json:"name"`
	// Policy rule affected ports or it ranges list
	Ports []string `json:"ports,omitempty"`
	// Policy rule type of the traffic
	Protocol Protocol `json:"protocol"`
	// Policy rule source group IDs
	Sources []GroupMinimum `json:"sources"`
}

func (o *PolicyRule) GetAction() Action {
	if o == nil {
		return Action("")
	}
	return o.Action
}

func (o *PolicyRule) GetBidirectional() bool {
	if o == nil {
		return false
	}
	return o.Bidirectional
}

func (o *PolicyRule) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PolicyRule) GetDestinations() []GroupMinimum {
	if o == nil {
		return []GroupMinimum{}
	}
	return o.Destinations
}

func (o *PolicyRule) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *PolicyRule) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PolicyRule) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PolicyRule) GetPorts() []string {
	if o == nil {
		return nil
	}
	return o.Ports
}

func (o *PolicyRule) GetProtocol() Protocol {
	if o == nil {
		return Protocol("")
	}
	return o.Protocol
}

func (o *PolicyRule) GetSources() []GroupMinimum {
	if o == nil {
		return []GroupMinimum{}
	}
	return o.Sources
}

// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PolicyRuleUpdateAction - Policy rule accept or drops packets
type PolicyRuleUpdateAction string

const (
	PolicyRuleUpdateActionAccept PolicyRuleUpdateAction = "accept"
	PolicyRuleUpdateActionDrop   PolicyRuleUpdateAction = "drop"
)

func (e PolicyRuleUpdateAction) ToPointer() *PolicyRuleUpdateAction {
	return &e
}

func (e *PolicyRuleUpdateAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accept":
		fallthrough
	case "drop":
		*e = PolicyRuleUpdateAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PolicyRuleUpdateAction: %v", v)
	}
}

// PolicyRuleUpdateProtocol - Policy rule type of the traffic
type PolicyRuleUpdateProtocol string

const (
	PolicyRuleUpdateProtocolAll  PolicyRuleUpdateProtocol = "all"
	PolicyRuleUpdateProtocolTCP  PolicyRuleUpdateProtocol = "tcp"
	PolicyRuleUpdateProtocolUDP  PolicyRuleUpdateProtocol = "udp"
	PolicyRuleUpdateProtocolIcmp PolicyRuleUpdateProtocol = "icmp"
)

func (e PolicyRuleUpdateProtocol) ToPointer() *PolicyRuleUpdateProtocol {
	return &e
}

func (e *PolicyRuleUpdateProtocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "tcp":
		fallthrough
	case "udp":
		fallthrough
	case "icmp":
		*e = PolicyRuleUpdateProtocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PolicyRuleUpdateProtocol: %v", v)
	}
}

type PolicyRuleUpdate struct {
	// Policy rule accept or drops packets
	Action PolicyRuleUpdateAction `json:"action"`
	// Define if the rule is applicable in both directions, sources, and destinations.
	Bidirectional bool `json:"bidirectional"`
	// Policy rule friendly description
	Description *string `json:"description,omitempty"`
	// Policy rule destination groups
	Destinations []string `json:"destinations"`
	// Policy rule status
	Enabled bool `json:"enabled"`
	// Policy rule ID
	ID *string `json:"id,omitempty"`
	// Policy rule name identifier
	Name string `json:"name"`
	// Policy rule affected ports or it ranges list
	Ports []string `json:"ports,omitempty"`
	// Policy rule type of the traffic
	Protocol PolicyRuleUpdateProtocol `json:"protocol"`
	// Policy rule source groups
	Sources []string `json:"sources"`
}

func (o *PolicyRuleUpdate) GetAction() PolicyRuleUpdateAction {
	if o == nil {
		return PolicyRuleUpdateAction("")
	}
	return o.Action
}

func (o *PolicyRuleUpdate) GetBidirectional() bool {
	if o == nil {
		return false
	}
	return o.Bidirectional
}

func (o *PolicyRuleUpdate) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PolicyRuleUpdate) GetDestinations() []string {
	if o == nil {
		return []string{}
	}
	return o.Destinations
}

func (o *PolicyRuleUpdate) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *PolicyRuleUpdate) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PolicyRuleUpdate) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PolicyRuleUpdate) GetPorts() []string {
	if o == nil {
		return nil
	}
	return o.Ports
}

func (o *PolicyRuleUpdate) GetProtocol() PolicyRuleUpdateProtocol {
	if o == nil {
		return PolicyRuleUpdateProtocol("")
	}
	return o.Protocol
}

func (o *PolicyRuleUpdate) GetSources() []string {
	if o == nil {
		return []string{}
	}
	return o.Sources
}
